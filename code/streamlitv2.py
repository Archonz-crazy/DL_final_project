# -*- coding: utf-8 -*-
"""streamlitv2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zL50IoyFl541TE3cZvv12sgYhbTFaGH4
"""

import streamlit as st
import pandas as pd
import altair as alt
from PIL import Image

# Set title
st.title('Hello, this is Team 6')

# Sidebar navigation
page = st.sidebar.selectbox("Select a Page", ["Front Page", "Try It Yourself", "About the Team"])

if page == "Front Page":
    # About the dataset
    st.header('About the Dataset')
    st.write("""
    Describe your dataset here.
    For example, you can provide information about the types of images (fire, no fire), number of samples, etc.
    """)

    # Visualization graphs
    st.header('Visualization Graphs')

    # Dummy data for visualization
    data = {'Class': ['Fire', 'NoFire'], 'Count': [5000, 3600]}
    df = pd.DataFrame(data)

    # Bar graph for Fire
    st.subheader('Bar Graph for Fire and NoFire Images')
    fig_fire = alt.Chart(df).mark_bar().encode(
        x='Class',
        y='Count',
        tooltip=['Class', 'Count']
    ).interactive()
    st.altair_chart(fig_fire, use_container_width=True)

    # Fire images
    data1 = {'Class': ['Train', 'Test', 'Valid'], 'Count': [3600, 700, 700]}
    df1 = pd.DataFrame(data1)

    # Bar graph for Fire
    st.subheader('Bar Graph for Fire Images')
    fig_fire1 = alt.Chart(df1).mark_bar().encode(
        x='Class',
        y='Count',
        tooltip=['Class', 'Count']
    ).interactive()
    st.altair_chart(fig_fire1, use_container_width=True)

    # NoFire images
    data2 = {'Class': ['Train', 'Test', 'Valid'], 'Count': [3200, 200, 200]}
    df2 = pd.DataFrame(data2)
    # Bar graph for NoFire
    st.subheader('Bar Graph for NoFire Images')
    fig_fire2 = alt.Chart(df2).mark_bar().encode(
        x='Class',
        y='Count',
        tooltip=['Class', 'Count']
    ).interactive()
    st.altair_chart(fig_fire2, use_container_width=True)

    # Modelling Images
    st.header('Modelling Images')

    # Placeholder for uploaded image
    uploaded_file = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])

    # Display uploaded image
    if uploaded_file is not None:
        img = Image.open(uploaded_file)
        st.image(img, caption="Uploaded Image", use_column_width=True)

        # Description and prediction about the image
        st.header('Description and Prediction')
        st.write("""
        Provide a brief description of the image or any relevant information.
        You can also implement a model to make predictions here.
        """)

elif page == "Try It Yourself":
    st.header('Try It Yourself')

    # Placeholder for uploaded image
    uploaded_file_try = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])

    # Display uploaded image
    if uploaded_file_try is not None:
        img_try = Image.open(uploaded_file_try)
        st.image(img_try, caption="Uploaded Image", use_column_width=True)

        # Make predictions


elif page == "About the Team":
    st.header('About the Team')
    st.write("""
    Provide information about the team members here.
    You can include details such as names, roles, and contributions.
    """)

# Footer
st.sidebar.markdown("---")
st.sidebar.markdown("Team 6 - Streamlit App")